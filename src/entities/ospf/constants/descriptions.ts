import { LSType, RouterLinkType } from "../enum";

export const lsTypeDescriptions = (lsType: LSType) => {
  switch (lsType) {
    case LSType.RouterLSA:
      return `
        <ul style="list-style: none">
          <li>A Router LSA describes the state and cost of <b>all</b> of the router's links to the area.</li>
          <li>A router must generate <b>1 Router LSA per Area that its connected to</b>.</li>
        </ul>
          `;
    case LSType.NetworkLSA:
      return `
        <ul style="list-style: none">
          <li>A Network LSA describes all routers attached to the network. <b>The network belongs to the current area</b>.</li>
          <li>It is originated by the network's <b>Designated Router</b>.</li>
        </ul>
          `;
    case LSType.ASExternalLSA:
      return `
        <ul style="list-style: none">
          <li>AS-External LSAs describe a particular destination <i>external to the Autonomous System</i>.</li>
          <li>These are generated by <b>AS-Boundary Routers</b>.</li>
        </ul>
          `;
    case LSType.SummaryAsBrLSA:
      return `
        <ul style="list-style: none">
          <li>AS Summary LSA describes inter-area destinations for areas external to the AS.</li>
          <li>These are generated by <b>Area Border Routers</b>.</li>
        </ul>
          `;
    case LSType.SummaryIpLSA:
      return `
        <ul style="list-style: none">
          <li>AS-External LSAs describe a particular destination <i>external to the Autonomous System</i>.</li>
          <li>These are generated by <b>Area Border Routers</b>.</li>
        </ul>
          `;
    default:
      return "";
  }
};

export const lsIdDescription = (lsType: LSType) => {
  switch (lsType) {
    case LSType.RouterLSA:
      return `Specifies the <b>Router ID of the originating router</b>.`;
    case LSType.NetworkLSA:
      return `Specifies an <b>IP network number belonging to the current area</b>.`;
    case LSType.ASExternalLSA:
      return `Specifies the <b>Router ID of the originating router</b>.`;
    case LSType.SummaryAsBrLSA:
      return `Specifies the <b>AS boundary router's OSPF Router ID</b>.`;
    case LSType.SummaryIpLSA:
      return `Specifies an <b>IP network number</b> of a network <b>external to the current area</b>.`;
    default:
      return "";
  }
};

export const lsIdSummary = (lsType: LSType) => {
  switch (lsType) {
    case LSType.RouterLSA:
      return `<b>Router ID of the router which created this LSA</b>.`;
    case LSType.NetworkLSA:
      return `<b>IP network number</b> of the network being described in the LSA.`;
    case LSType.ASExternalLSA:
      return `<b>Router ID of the originating router</b> which is located <i>outside</i> of the current AS.`;
    case LSType.SummaryAsBrLSA:
      return `<b>AS boundary router's OSPF Router ID</b>.`;
    case LSType.SummaryIpLSA:
      return `<b>IP network number</b> of the <i>Area-External</i> network.`;
    default:
      return "";
  }
};

export const linkIdSummary = (linkType: RouterLinkType) => {
  switch (linkType) {
    case RouterLinkType.P2P:
      return "Router ID of the neighboring router physically located in the current area.";
    case RouterLinkType.Stub:
      return "IP address of Designated Router of the stub network.";
    case RouterLinkType.Transit:
      return "IP network/subnet number of the transit network.";
    case RouterLinkType.Virtual:
      return `
        Router ID of the neighboring router physically located outside the current area
        (Connected through a virtual link over transit networks).`;
    default:
      return "";
  }
};

export const linkDataSummary = (linkType: RouterLinkType) => {
  switch (linkType) {
    case RouterLinkType.P2P:
      return "IP Address of the router on the other end.";
    case RouterLinkType.Stub:
      return "The stub network's IP address mask.";
    case RouterLinkType.Transit:
      return "IP address of the transit network.";
    case RouterLinkType.Virtual:
      return `
        IP Address of the neighboring router physically located outside the current area
        (Connected through a virtual link over transit networks).`;
    default:
      return "";
  }
};
